/*
 * Copyright (c) SRG SSR. All rights reserved.
 * License information is available from the LICENSE file.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    alias(libs.plugins.android.compose.screenshot)
    alias(libs.plugins.android.library)
    alias(libs.plugins.dokka)
    alias(libs.plugins.dokka.javadoc)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.kotlinx.kover)
    alias(libs.plugins.maven.publish)
}

android {
    experimentalProperties["android.experimental.enableScreenshotTest"] = true
    namespace = "ch.srgssr.media.maestro"
    compileSdk = 36

    defaultConfig {
        minSdk = 23
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    buildFeatures {
        compose = true
        resValues = false
        shaders = false
    }

    lint {
        disable.add("PrivateResource")
        disable.add("RestrictedApi")
    }

    testOptions {
        unitTests {
            isIncludeAndroidResources = true
        }
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
        }
    }

    sourceSets.create("screenshotTestDebug") {
        // Disable explicit API mode for screenshot tests
        project.kotlin.compilerOptions.freeCompilerArgs.add("-Xexplicit-api=disable")
    }
}

kotlin {
    explicitApi()

    compilerOptions {
        jvmTarget = JvmTarget.JVM_17
        freeCompilerArgs.add("-Xannotation-default-target=param-property")
    }
}

tasks.withType<Test>().configureEach {
    testLogging.exceptionFormat = TestExceptionFormat.FULL
}

val dokkaHtmlJar by tasks.registering(Jar::class) {
    dependsOn(tasks.dokkaGeneratePublicationHtml)
    from(tasks.dokkaGeneratePublicationHtml.flatMap { it.outputDirectory })
    archiveClassifier.set("html-docs")
}

val dokkaJavadocJar by tasks.registering(Jar::class) {
    dependsOn(tasks.dokkaGeneratePublicationJavadoc)
    from(tasks.dokkaGeneratePublicationJavadoc.flatMap { it.outputDirectory })
    archiveClassifier.set("javadoc")
}

kover {
    reports {
        filters {
            excludes {
                annotatedBy("androidx.compose.ui.tooling.preview.Preview")
                // Generated by the Compose compiler
                classes("${android.namespace}.ComposableSingletons*")
                inheritedFrom("androidx.compose.ui.tooling.preview.PreviewParameterProvider")
            }
        }
    }
}

dependencies {
    implementation(libs.androidx.annotation)
    implementation(libs.androidx.compose.animation)
    implementation(libs.androidx.compose.animation.core)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.compose.foundation)
    api(libs.androidx.compose.foundation.layout)
    implementation(libs.androidx.compose.material3)
    implementation(libs.androidx.compose.runtime)
    implementation(libs.androidx.compose.ui)
    implementation(libs.androidx.compose.ui.geometry)
    implementation(libs.androidx.compose.ui.graphics)
    debugRuntimeOnly(libs.androidx.compose.ui.test.manifest)
    implementation(libs.androidx.compose.ui.text)
    implementation(libs.androidx.compose.ui.tooling.preview)
    debugImplementation(libs.androidx.compose.ui.tooling)
    implementation(libs.androidx.compose.ui.unit)
    implementation(libs.androidx.core)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.viewmodel)
    implementation(libs.androidx.lifecycle.viewmodel.compose)
    implementation(libs.androidx.lifecycle.viewmodel.savedstate)
    implementation(libs.androidx.media)
    api(libs.androidx.mediarouter)
    implementation(libs.coil.compose)
    implementation(libs.coil.compose.core)
    implementation(libs.coil.core)
    implementation(libs.coil.network.okhttp)

    testImplementation(libs.androidx.activity)
    testImplementation(libs.androidx.compose.ui.test)
    testImplementation(libs.androidx.lifecycle.viewmodel.testing)
    testImplementation(libs.androidx.mediarouter.testing)
    testImplementation(libs.androidx.test.core)
    testImplementation(libs.androidx.test.ext.junit)
    testImplementation(libs.junit)
    testImplementation(libs.kotlin.test)
    testImplementation(libs.kotlinx.coroutines.core)
    testImplementation(libs.kotlinx.coroutines.test)
    testImplementation(libs.robolectric)
    testImplementation(libs.robolectric.annotations)
    testImplementation(libs.robolectric.shadows.framework)
    testImplementation(libs.turbine)

    screenshotTestImplementation(libs.android.screenshot.validation.api)
    screenshotTestImplementation(libs.androidx.compose.ui.tooling)
}

publishing {
    publications {
        register<MavenPublication>("GitHubPackages") {
            group = "ch.srgssr.media.maestro"
            version = providers.environmentVariable("VERSION_NAME").getOrElse("dev")

            artifact(dokkaHtmlJar)
            artifact(dokkaJavadocJar)

            afterEvaluate {
                from(components["release"])
            }

            pom {
                name = "MediaMaestro"
                description = "Seamless integration of AndroidX MediaRouter with Compose"
                url = "https://github.com/SRGSSR/MediaMaestro"
                inceptionYear = "2025"

                licenses {
                    license {
                        name = "The MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }

                organization {
                    name = "SRG SSR"
                    url = "https://www.srgssr.ch/"
                }

                scm {
                    connection = "scm:git:git://github.com/SRGSSR/MediaMaestro.git"
                    developerConnection = "scm:git:git@github.com:SRGSSR/MediaMaestro.git"
                    url = "https://github.com/SRGSSR/MediaMaestro"
                }

                issueManagement {
                    system = "GitHub Issues"
                    url = "https://github.com/SRGSSR/MediaMaestro/issues"
                }

                ciManagement {
                    system = "GitHub Actions"
                    url = "https://github.com/SRGSSR/MediaMaestro/actions"
                }

                // TODO Simplify this once https://github.com/gradle/gradle/issues/28759 is released
                withXml {
                    asNode().appendNode("distributionManagement").apply {
                        appendNode("repository").apply {
                            appendNode("id", "github-packages")
                            appendNode("name", "GitHub Packages")
                            appendNode("url", "https://maven.pkg.github.com/SRGSSR/MediaMaestro")
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/SRGSSR/MediaMaestro")

            val gitHubUser = providers.gradleProperty("gpr.user")
                .orElse(providers.environmentVariable("USERNAME"))
            val gitHubPassword = providers.gradleProperty("gpr.key")
                .orElse(providers.environmentVariable("GITHUB_TOKEN"))

            credentials {
                if (gitHubUser.isPresent) {
                    username = gitHubUser.get()
                }

                if (gitHubPassword.isPresent) {
                    password = gitHubPassword.get()
                }
            }
        }
    }
}
